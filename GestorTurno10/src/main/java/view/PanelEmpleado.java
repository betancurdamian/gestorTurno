/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.EmpleadoController;
import dao.exceptions.NonexistentEntityException;
import java.awt.Color;
import java.awt.Rectangle;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.Area;
import model.Empleado;
import model.TipoEmpleado;
import view.resources.TablaEmpleadoModelListener;
import view.resources.TablaEmpleadoModelo;

/**
 *
 * @author Ariel
 */
public class PanelEmpleado extends javax.swing.JPanel implements InterfacePanel {

    private final ValidadorDeCampos validador;

    //variables de tabla
    private final TablaEmpleadoModelo tablaEmpleadoModelo;

    //variables de comboBox
    private final DefaultComboBoxModel tipoEmpleadoModel;
    
    //variables de comboBox
    private final DefaultComboBoxModel tipoAreaModel;

    private final EmpleadoController controlador;
    private Empleado empleadoSeleccionado;

    private final List<Empleado> empleados;

    private String crud;

    /**
     * Creates new form PanelPersona
     */
    public PanelEmpleado() {
        //JTable vacio
        this.tablaEmpleadoModelo = new TablaEmpleadoModelo();
        this.validador = new ValidadorDeCampos();
        //JComboBox vacio
        this.tipoEmpleadoModel = new DefaultComboBoxModel();
        this.tipoAreaModel = new DefaultComboBoxModel();
        this.crud = "";

        this.empleados = new ArrayList<>();
        initComponents();
        habilitarTodosLosBotones(false);
        this.validador.habilitarBoton(true, this.jbtn_volver, Color.red, Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(false, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);

        habilitarTodosLosCampos(false);

        //iniciar el controlador de esta vista
        this.controlador = new EmpleadoController();
        setSize(800, 600);

        //agrega escuchadores de las tablas
        this.jtb_empleado.getSelectionModel().addListSelectionListener(new TablaEmpleadoModelListener(this));

        limpiarTodosLosCampos();

        this.validador.LimitarCaracteres(this.jtf_dni, 8);
        this.validador.validarSoloNumero(this.jtf_dni);
        this.validador.LimitarCaracteres(this.jtf_buscarEmpleado, 8);
        this.validador.validarSoloNumero(this.jtf_buscarEmpleado);

        this.validador.validarSoloLetras(jtf_nombre);
        this.validador.LimitarCaracteres(this.jtf_nombre, 30);
        this.validador.validarSoloLetras(jtf_apellido);
        this.validador.LimitarCaracteres(this.jtf_apellido, 30);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_crud = new javax.swing.JPanel();
        jScrollPaneTabla = new javax.swing.JScrollPane();
        jtb_empleado = new javax.swing.JTable();
        jbtn_listar = new javax.swing.JButton();
        jbtn_agregar = new javax.swing.JButton();
        jtf_buscarEmpleado = new javax.swing.JTextField();
        jPanel_datos = new javax.swing.JPanel();
        jbtn_eliminar = new javax.swing.JButton();
        jbtn_cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtf_nombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtf_apellido = new javax.swing.JTextField();
        jtf_dni = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jcb_tipoEmpleado = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jbtn_modificar = new javax.swing.JButton();
        jbtn_aceptar = new javax.swing.JButton();
        jlbl_mensaje = new javax.swing.JLabel();
        jlbl_alertaTipoPersona = new javax.swing.JLabel();
        jlbl_alertaNombre = new javax.swing.JLabel();
        jlbl_alertaApellido = new javax.swing.JLabel();
        jlbl_alertaDNI = new javax.swing.JLabel();
        jcb_area = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jbtn_volver = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        jPanel_crud.setLayout(null);

        jScrollPaneTabla.setMaximumSize(new java.awt.Dimension(950, 750));
        jScrollPaneTabla.setMinimumSize(new java.awt.Dimension(950, 750));
        jScrollPaneTabla.setPreferredSize(new java.awt.Dimension(950, 750));

        jtb_empleado.setModel(tablaEmpleadoModelo);
        jScrollPaneTabla.setViewportView(jtb_empleado);

        jPanel_crud.add(jScrollPaneTabla);
        jScrollPaneTabla.setBounds(10, 10, 700, 210);

        jbtn_listar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_listar.setText("LISTAR");
        jbtn_listar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_listarActionPerformed(evt);
            }
        });
        jPanel_crud.add(jbtn_listar);
        jbtn_listar.setBounds(10, 240, 100, 30);

        jbtn_agregar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_agregar.setText("AGREGAR");
        jbtn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_agregarActionPerformed(evt);
            }
        });
        jPanel_crud.add(jbtn_agregar);
        jbtn_agregar.setBounds(610, 240, 100, 30);

        jtf_buscarEmpleado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtf_buscarEmpleado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_buscarEmpleadoFocusGained(evt);
            }
        });
        jtf_buscarEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_buscarEmpleadoKeyReleased(evt);
            }
        });
        jPanel_crud.add(jtf_buscarEmpleado);
        jtf_buscarEmpleado.setBounds(120, 240, 480, 30);

        add(jPanel_crud);
        jPanel_crud.setBounds(70, 40, 720, 280);

        jPanel_datos.setLayout(null);

        jbtn_eliminar.setText("ELIMINAR");
        jbtn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_eliminarActionPerformed(evt);
            }
        });
        jPanel_datos.add(jbtn_eliminar);
        jbtn_eliminar.setBounds(500, 270, 100, 30);

        jbtn_cancelar.setText("CANCELAR");
        jbtn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_cancelarActionPerformed(evt);
            }
        });
        jPanel_datos.add(jbtn_cancelar);
        jbtn_cancelar.setBounds(250, 270, 100, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("NOMBRE");
        jPanel_datos.add(jLabel1);
        jLabel1.setBounds(120, 10, 120, 30);

        jtf_nombre.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel_datos.add(jtf_nombre);
        jtf_nombre.setBounds(250, 10, 350, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("APELLIDO");
        jPanel_datos.add(jLabel2);
        jLabel2.setBounds(120, 50, 120, 30);

        jtf_apellido.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel_datos.add(jtf_apellido);
        jtf_apellido.setBounds(250, 50, 350, 30);

        jtf_dni.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel_datos.add(jtf_dni);
        jtf_dni.setBounds(250, 90, 350, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("TIPO EMPLEADO");
        jPanel_datos.add(jLabel3);
        jLabel3.setBounds(120, 130, 120, 30);

        jcb_tipoEmpleado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jcb_tipoEmpleado.setModel(tipoEmpleadoModel);
        jPanel_datos.add(jcb_tipoEmpleado);
        jcb_tipoEmpleado.setBounds(250, 130, 350, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("DNI");
        jPanel_datos.add(jLabel4);
        jLabel4.setBounds(120, 90, 120, 30);

        jbtn_modificar.setText("MODIFICAR");
        jbtn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_modificarActionPerformed(evt);
            }
        });
        jPanel_datos.add(jbtn_modificar);
        jbtn_modificar.setBounds(380, 270, 100, 30);

        jbtn_aceptar.setText("ACEPTAR");
        jbtn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_aceptarActionPerformed(evt);
            }
        });
        jPanel_datos.add(jbtn_aceptar);
        jbtn_aceptar.setBounds(120, 270, 100, 30);

        jlbl_mensaje.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlbl_mensaje.setForeground(new java.awt.Color(255, 0, 0));
        jPanel_datos.add(jlbl_mensaje);
        jlbl_mensaje.setBounds(120, 220, 480, 30);

        jlbl_alertaTipoPersona.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel_datos.add(jlbl_alertaTipoPersona);
        jlbl_alertaTipoPersona.setBounds(620, 170, 40, 30);

        jlbl_alertaNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel_datos.add(jlbl_alertaNombre);
        jlbl_alertaNombre.setBounds(620, 30, 40, 30);

        jlbl_alertaApellido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel_datos.add(jlbl_alertaApellido);
        jlbl_alertaApellido.setBounds(620, 70, 40, 30);

        jlbl_alertaDNI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel_datos.add(jlbl_alertaDNI);
        jlbl_alertaDNI.setBounds(620, 120, 40, 30);

        jcb_area.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jcb_area.setModel(tipoAreaModel);
        jPanel_datos.add(jcb_area);
        jcb_area.setBounds(250, 180, 350, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("AREA");
        jPanel_datos.add(jLabel5);
        jLabel5.setBounds(120, 180, 120, 30);

        add(jPanel_datos);
        jPanel_datos.setBounds(70, 330, 720, 310);

        jbtn_volver.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jbtn_volver.setText("VOLVER");
        jbtn_volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_volverActionPerformed(evt);
            }
        });
        add(jbtn_volver);
        jbtn_volver.setBounds(70, 653, 720, 60);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Controla el boton volver
     *
     * @param evt
     */
    private void jbtn_volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_volverActionPerformed
        //Inhabilita Botones
        habilitarTodosLosBotones(false);

        //limpia todos los campos
        limpiarTodosLosCampos();

        //Habilita el Arbol de seleccion
        JFramePrincipal.habilitarArbol(true);
    }//GEN-LAST:event_jbtn_volverActionPerformed

    /**
     * Controla el boton cancelar
     *
     * @param evt
     */
    private void jbtn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_cancelarActionPerformed
        //Actualizar el TableModel con la lista del controlador
        this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

        //Refrescar el modelo en la tabla
        this.tablaEmpleadoModelo.fireTableDataChanged();

        limpiarTodosLosCampos();
        habilitarTodosLosCampos(false);
        habilitarTodosLosBotones(false);

        this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

        this.empleadoSeleccionado = null;

        this.jtb_empleado.setEnabled(true);

        this.jlbl_alertaNombre.setIcon(null);
        this.jlbl_alertaApellido.setIcon(null);
        this.jlbl_alertaDNI.setIcon(null);

        this.jlbl_mensaje.setText("");
    }//GEN-LAST:event_jbtn_cancelarActionPerformed

    /**
     * Controla el boton modificar
     *
     * @param evt
     */
    private void jbtn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_modificarActionPerformed
        this.crud = "modificar";
        habilitarTodosLosBotones(false);
        habilitarTodosLosCampos(true);
        this.validador.habilitarBoton(false, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_cancelar, Color.red, Color.WHITE, null, null);
        this.validador.habilitarBoton(false, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(false, this.jtf_buscarEmpleado);

        this.jtb_empleado.setEnabled(false);
        cargarTiposDeEmpleado();
        cargarAreas();
        this.jcb_tipoEmpleado.setSelectedItem(this.empleadoSeleccionado.getUnTipoEmpleado());
        this.jcb_area.setSelectedItem(this.empleadoSeleccionado.getUnAreaA());
    }//GEN-LAST:event_jbtn_modificarActionPerformed

    /**
     * Controla el boton aceptar si se presiono el boton agregar, llama a la
     * función agregar si se presiono el boton modificar, llama a la función
     * modificar si se presiono el boton eliminar, llama a la función eliminar
     *
     * @param evt
     */
    private void jbtn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_aceptarActionPerformed
        int opcion = 0;
        if (crud.equals("agregar")) {
            opcion = JOptionPane.showConfirmDialog(null, "Realmente desea Agregar la persona", "Confirmar Creación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                agregar();
            } else {
                //Actualizar el TableModel con la lista del controlador
                this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

                //Refrescar el modelo en la tabla
                this.tablaEmpleadoModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

                this.empleadoSeleccionado = null;

                this.jtb_empleado.setEnabled(true);

                this.jlbl_alertaNombre.setIcon(null);
                this.jlbl_alertaApellido.setIcon(null);
                this.jlbl_alertaDNI.setIcon(null);

                this.jlbl_mensaje.setText("");
            }
        }

        if (crud.equals("modificar")) {
            opcion = JOptionPane.showConfirmDialog(null, "Realmente desea Modificar la persona", "Confirmar Modificación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                try {
                    modificar();
                } catch (Exception ex) {
                    Logger.getLogger(PanelEmpleado.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                //Actualizar el TableModel con la lista del controlador
                this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

                //Refrescar el modelo en la tabla
                this.tablaEmpleadoModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

                this.empleadoSeleccionado = null;

                this.jtb_empleado.setEnabled(true);

                this.jlbl_alertaNombre.setIcon(null);
                this.jlbl_alertaApellido.setIcon(null);
                this.jlbl_alertaDNI.setIcon(null);

                this.jlbl_mensaje.setText("");
            }
        }
        if (crud.equals("eliminar")) {
            opcion = JOptionPane.showConfirmDialog(null, "Realmente desea eliminar la persona", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {

                try {
                    if (controlador.eliminarEmpleado(empleadoSeleccionado)) {
                        opcion = JOptionPane.showConfirmDialog(null, "La eliminación se realizo con exito", "Persona Eliminada", JOptionPane.CLOSED_OPTION, JOptionPane.QUESTION_MESSAGE);
                    } else {
                        //No se pudo eliminar
                        opcion = JOptionPane.showConfirmDialog(null, "Persona asociada a registros", "Error Eliminación", JOptionPane.CLOSED_OPTION, JOptionPane.QUESTION_MESSAGE);
                    }
                    //Actualizar el TableModel con la lista del controlador
                    this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

                    //Refrescar el modelo en la tabla
                    this.tablaEmpleadoModelo.fireTableDataChanged();

                    limpiarTodosLosCampos();
                    habilitarTodosLosCampos(false);
                    habilitarTodosLosBotones(false);

                    this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                    this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                    this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

                    this.empleadoSeleccionado = null;

                    this.jtb_empleado.setEnabled(true);

                    this.jlbl_alertaNombre.setIcon(null);
                    this.jlbl_alertaApellido.setIcon(null);
                    this.jlbl_alertaDNI.setIcon(null);

                    this.jlbl_mensaje.setText("");

                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(PanelEmpleado.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                //Actualizar el TableModel con la lista del controlador
                this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

                //Refrescar el modelo en la tabla
                this.tablaEmpleadoModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

                this.empleadoSeleccionado = null;

                this.jtb_empleado.setEnabled(true);

                this.jlbl_alertaNombre.setIcon(null);
                this.jlbl_alertaApellido.setIcon(null);
                this.jlbl_alertaDNI.setIcon(null);

                this.jlbl_mensaje.setText("");
            }
        }


    }//GEN-LAST:event_jbtn_aceptarActionPerformed

    /**
     * Controla el boton Listar
     *
     * @param evt
     */
    private void jbtn_listarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_listarActionPerformed
        //Actualizar el TableModel con la lista del controlador
        this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

        //Refrescar el modelo en la tabla
        this.tablaEmpleadoModelo.fireTableDataChanged();

        limpiarTodosLosCampos();
        habilitarTodosLosCampos(false);
        habilitarTodosLosBotones(false);

        this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

        this.empleadoSeleccionado = null;

    }//GEN-LAST:event_jbtn_listarActionPerformed

    /**
     * Controla el boton agregar
     *
     * @param evt
     */
    private void jbtn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_agregarActionPerformed
        this.crud = "agregar";
        this.validador.limpiarCampo(this.jtf_nombre);
        this.validador.limpiarCampo(this.jtf_apellido);
        this.validador.limpiarCampo(this.jtf_dni);
        this.validador.limpiarCampo(this.jtf_buscarEmpleado);
        this.jcb_tipoEmpleado.removeAllItems();
        this.jcb_area.removeAllItems();
        habilitarTodosLosBotones(false);
        habilitarTodosLosCampos(true);
        this.validador.habilitarBoton(false, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_cancelar, Color.red, Color.WHITE, null, null);
        this.validador.habilitarBoton(false, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(false, this.jtf_buscarEmpleado);

        this.jtb_empleado.setEnabled(false);
        cargarTiposDeEmpleado();
        cargarAreas();

    }//GEN-LAST:event_jbtn_agregarActionPerformed

    /**
     * Controla el Foco del JTextFiel buscar persona
     *
     * @param evt
     */
    private void jtf_buscarEmpleadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_buscarEmpleadoFocusGained
        if (this.jtf_buscarEmpleado.isEditable()) {
            this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

            //Refrescar el modelo en la tabla
            this.tablaEmpleadoModelo.fireTableDataChanged();

            limpiarTodosLosCampos();
            habilitarTodosLosCampos(false);
            habilitarTodosLosBotones(false);

            this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

            this.empleadoSeleccionado = null;

            this.jtb_empleado.setEnabled(true);

            this.jlbl_alertaNombre.setIcon(null);
            this.jlbl_alertaApellido.setIcon(null);
            this.jlbl_alertaDNI.setIcon(null);

            this.jlbl_mensaje.setText("");
        }
    }//GEN-LAST:event_jtf_buscarEmpleadoFocusGained

    /**
     * Escucha si en el JTextFiel buscar persona se presionan teclas
     *
     * @param evt
     */
    private void jtf_buscarEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_buscarEmpleadoKeyReleased
        if (this.jtf_buscarEmpleado.isEditable()) {
            //Actualizar el TableModel con la lista del controlador
            this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscaEmpleadosPorDNI(this.jtf_buscarEmpleado.getText()));

            //Refrescar el modelo en la tabla
            this.tablaEmpleadoModelo.fireTableDataChanged();
        }
    }//GEN-LAST:event_jtf_buscarEmpleadoKeyReleased

    /**
     * Controla el boton eliminar
     *
     * @param evt
     */
    private void jbtn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_eliminarActionPerformed
        this.crud = "eliminar";
        habilitarTodosLosBotones(false);
        habilitarTodosLosCampos(false);
        this.validador.habilitarBoton(false, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_cancelar, Color.red, Color.WHITE, null, null);
        this.validador.habilitarBoton(false, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(false, this.jtf_buscarEmpleado);

        this.jtb_empleado.setEnabled(false);
    }//GEN-LAST:event_jbtn_eliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel_crud;
    private javax.swing.JPanel jPanel_datos;
    private javax.swing.JScrollPane jScrollPaneTabla;
    private javax.swing.JButton jbtn_aceptar;
    private javax.swing.JButton jbtn_agregar;
    private javax.swing.JButton jbtn_cancelar;
    private javax.swing.JButton jbtn_eliminar;
    private javax.swing.JButton jbtn_listar;
    private javax.swing.JButton jbtn_modificar;
    private javax.swing.JButton jbtn_volver;
    private javax.swing.JComboBox<String> jcb_area;
    private javax.swing.JComboBox<String> jcb_tipoEmpleado;
    private javax.swing.JLabel jlbl_alertaApellido;
    private javax.swing.JLabel jlbl_alertaDNI;
    private javax.swing.JLabel jlbl_alertaNombre;
    private javax.swing.JLabel jlbl_alertaTipoPersona;
    private javax.swing.JLabel jlbl_mensaje;
    private javax.swing.JTable jtb_empleado;
    private javax.swing.JTextField jtf_apellido;
    private javax.swing.JTextField jtf_buscarEmpleado;
    private javax.swing.JTextField jtf_dni;
    private javax.swing.JTextField jtf_nombre;
    // End of variables declaration//GEN-END:variables

    //--------------------------------------------------------------------------
    //--------------------------Metodos Implementados---------------------------
    //--------------------------------------------------------------------------
    @Override
    public void habilitarTodosLosCampos(boolean estado) {
        this.validador.habilitarCampo(estado, this.jtf_nombre);
        this.validador.habilitarCampo(estado, this.jtf_apellido);
        this.validador.habilitarCampo(estado, this.jtf_dni);
        this.validador.habilitarCampo(estado, this.jtf_buscarEmpleado);
        this.validador.habilitarCombobox(estado, this.jcb_tipoEmpleado);
        this.validador.habilitarCombobox(estado, this.jcb_area);
    }

    @Override
    public void limpiarTodosLosCampos() {
        this.validador.limpiarCampo(this.jtf_nombre);
        this.validador.limpiarCampo(this.jtf_apellido);
        this.validador.limpiarCampo(this.jtf_dni);
        this.validador.limpiarCampo(this.jtf_buscarEmpleado);
        this.jcb_tipoEmpleado.removeAllItems();
        this.jcb_area.removeAllItems();
    }

    @Override
    public void habilitarTodosLosBotones(boolean estado) {
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_cancelar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_eliminar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_modificar, new Color(30, 132, 73), Color.WHITE, null, null);
    }

    //--------------------------------------------------------------------------
    //--------------------------Metodos Getters y Settes------------------------
    //--------------------------------------------------------------------------
    public javax.swing.JButton getJbtn_aceptar() {
        return this.jbtn_aceptar;
    }

    public javax.swing.JButton getJbtn_agregar() {
        return this.jbtn_agregar;
    }

    public javax.swing.JButton getJbtn_cancelar() {
        return this.jbtn_cancelar;
    }

    public javax.swing.JButton getJbtn_eliminar() {
        return this.jbtn_eliminar;
    }

    public javax.swing.JButton getJbtn_modificar() {
        return this.jbtn_modificar;
    }

    public ValidadorDeCampos getValidador() {
        return this.validador;
    }

    public javax.swing.JTextField getJtf_buscarPersona() {
        return this.jtf_buscarEmpleado;
    }

    public Empleado getEmpleadoSeleccionado() {
        return this.empleadoSeleccionado;
    }

    public void setEmpleadoSeleccionado(Empleado empleadoSeleccionado) {
        this.empleadoSeleccionado = empleadoSeleccionado;
    }

    //--------------------------------------------------------------------------
    //--------------------------Metodos Adicionales-----------------------------
    //--------------------------------------------------------------------------
    /**
     * Carga los tipos de persona el el JComboBox tipo de persona
     */
    public void cargarTiposDeEmpleado() {
        DefaultComboBoxModel mdl = new DefaultComboBoxModel(this.controlador.buscarTodosLosTiposDeEmpleados());
        this.jcb_tipoEmpleado.setModel(mdl);
    }
    
    /**
     * Carga los tipos de persona el el JComboBox tipo de persona
     */
    public void cargarAreas() {
        DefaultComboBoxModel mdl = new DefaultComboBoxModel(this.controlador.buscarTodasLasAreas());
        this.jcb_area.setModel(mdl);
    }

    /**
     * Selecciona una fila de la tabla, devolviendo un objeto Persona
     */
    public void seleccionarEmpleado() {
        //obtiene el indice de la fila seleccionada en la tabla de empleados
        int filaSeleccionada = this.jtb_empleado.getSelectedRow();
        // si la fila esta seleccionada, seteamos la persona auxiliar, llamando al modelo de tabla
        if (filaSeleccionada >= 0) {
            this.empleadoSeleccionado = this.tablaEmpleadoModelo.obtenerEmpleadoEn(filaSeleccionada);
            this.jtf_nombre.setText(this.empleadoSeleccionado.getNombre());
            this.jtf_apellido.setText(this.empleadoSeleccionado.getApellido());
            this.jtf_dni.setText(this.empleadoSeleccionado.getDni());
            this.jcb_tipoEmpleado.removeAllItems();
            this.jcb_tipoEmpleado.addItem(this.empleadoSeleccionado.getUnTipoEmpleado().getDescripcion());
            this.jcb_area.removeAllItems();
            this.jcb_area.addItem(this.empleadoSeleccionado.getUnAreaA().getNombre());
        } else {
            this.validador.habilitarBoton(false, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(true, this.jbtn_eliminar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(true, this.jbtn_modificar, new Color(30, 132, 73), Color.WHITE, null, null);
        }
    }

    //--------------------------------------------------------------------------
    //--------------------------Metodos CRUD------------------------------------
    //--------------------------------------------------------------------------
    /**
     * Crea un persona auxiliar y se lo envia al controlador para que persista
     * si el dni ya existe solicita que se ingrese uno diferente
     */
    public void agregar() {
        String mensaje = "";
        Empleado nuevoEmpleado = null;
        mensaje = "Completar:";
        if ((!this.jtf_nombre.getText().isEmpty()) && (!this.jtf_apellido.getText().isEmpty()) && (!this.jtf_dni.getText().isEmpty())) {

            nuevoEmpleado = new Empleado();
            nuevoEmpleado.setNombre(this.jtf_nombre.getText());
            nuevoEmpleado.setApellido(this.jtf_apellido.getText());
            nuevoEmpleado.setDni(this.jtf_dni.getText());
            nuevoEmpleado.setUnTipoEmpleado((TipoEmpleado) this.jcb_tipoEmpleado.getSelectedItem());
            nuevoEmpleado.setUnAreaA((Area) this.jcb_area.getSelectedItem());
            this.jlbl_alertaNombre.setIcon(null);
            this.jlbl_alertaApellido.setIcon(null);
            this.jlbl_alertaDNI.setIcon(null);
            this.jlbl_mensaje.setText("");

        } else {
            if (this.jtf_nombre.getText().isEmpty()) {
                this.jlbl_alertaNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *Nombre ";
            } else {
                this.jlbl_alertaNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (this.jtf_apellido.getText().isEmpty()) {
                this.jlbl_alertaApellido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *Apellido ";
            } else {
                this.jlbl_alertaApellido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (this.jtf_dni.getText().isEmpty()) {
                this.jlbl_alertaDNI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *DNI ";
            } else {
                this.jlbl_alertaDNI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            this.jlbl_mensaje.setText(mensaje);
        }
        if (nuevoEmpleado != null) {
            if (this.controlador.agregarEmpleado(nuevoEmpleado)) {
                this.jlbl_mensaje.setText("");

                //limpiar campos
                //Actualizar el TableModel con la lista del controlador
                this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

                //Refrescar el modelo en la tabla
                this.tablaEmpleadoModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

                this.jtb_empleado.setEnabled(true);

                this.empleadoSeleccionado = null;

                this.jtb_empleado.getSelectionModel().setSelectionInterval(this.tablaEmpleadoModelo.getRowCount() - 1, this.tablaEmpleadoModelo.getRowCount() - 1);
                this.tablaEmpleadoModelo.getValueAt(this.tablaEmpleadoModelo.getRowCount() - 1, 0);

                seleccionarEmpleado();

                int selectedRow = jtb_empleado.getSelectedRow();
                Rectangle rect = jtb_empleado.getCellRect(selectedRow, 0, true);
                jScrollPaneTabla.getViewport().scrollRectToVisible(rect);
                crud = "";
            } else {
                this.jlbl_alertaDNI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *El DNI ya existe, ingrese otro";
                this.jlbl_mensaje.setText(mensaje);
            }
        }

    }

    /**
     * Modifica una persona existente
     *
     * @throws java.lang.Exception
     */
    public void modificar() throws Exception {
        String mensaje = "";
        Empleado nuevoEmpleado = null;
        mensaje = "Completar:";
        if ((!this.jtf_nombre.getText().isEmpty()) && (!this.jtf_apellido.getText().isEmpty()) && (!this.jtf_dni.getText().isEmpty())) {

            nuevoEmpleado = new Empleado();
            nuevoEmpleado.setNombre(this.jtf_nombre.getText());
            nuevoEmpleado.setApellido(this.jtf_apellido.getText());
            nuevoEmpleado.setDni(this.jtf_dni.getText());
            nuevoEmpleado.setUnTipoEmpleado((TipoEmpleado) this.jcb_tipoEmpleado.getSelectedItem());
            nuevoEmpleado.setUnAreaA((Area) this.jcb_area.getSelectedItem());
            this.jlbl_alertaNombre.setIcon(null);
            this.jlbl_alertaApellido.setIcon(null);
            this.jlbl_alertaDNI.setIcon(null);
            this.jlbl_mensaje.setText("");

        } else {
            if (this.jtf_nombre.getText().isEmpty()) {
                this.jlbl_alertaNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *Nombre ";
            } else {
                this.jlbl_alertaNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (this.jtf_apellido.getText().isEmpty()) {
                this.jlbl_alertaApellido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *Apellido ";
            } else {
                this.jlbl_alertaApellido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (this.jtf_dni.getText().isEmpty()) {
                this.jlbl_alertaDNI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *DNI ";
            } else {
                this.jlbl_alertaDNI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            this.jlbl_mensaje.setText(mensaje);
        }
        if (nuevoEmpleado != null) {
            if (this.controlador.modificarEmpleado(empleadoSeleccionado, nuevoEmpleado)) {

                this.jlbl_mensaje.setText("");

                //limpiar campos
                //Actualizar el TableModel con la lista del controlador
                this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

                //Refrescar el modelo en la tabla
                this.tablaEmpleadoModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

                this.jtb_empleado.setEnabled(true);

                this.jtb_empleado.getSelectionModel().setSelectionInterval(this.tablaEmpleadoModelo.buscarFilaEmpleado(empleadoSeleccionado) - 1, this.tablaEmpleadoModelo.buscarFilaEmpleado(empleadoSeleccionado) - 1);

                seleccionarEmpleado();

                int selectedRow = jtb_empleado.getSelectedRow();
                Rectangle rect = jtb_empleado.getCellRect(selectedRow, 0, true);
                jScrollPaneTabla.getViewport().scrollRectToVisible(rect);
                crud = "";
            } else {
                this.jlbl_alertaDNI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *El DNI ya existe, ingrese otro";
                this.jlbl_mensaje.setText(mensaje);
            }

        }
    }

    /**
     * Elimina una persona existente
     *
     * @throws java.sql.SQLIntegrityConstraintViolationException
     */
    public void eliminar() throws SQLIntegrityConstraintViolationException, SQLException {

        try {
            controlador.eliminarEmpleado(empleadoSeleccionado);
            this.jlbl_mensaje.setText("");

            //limpiar campos
            //Actualizar el TableModel con la lista del controlador
            this.tablaEmpleadoModelo.setEmpleados(this.controlador.buscarTodasLosEmpleados());

            //Refrescar el modelo en la tabla
            this.tablaEmpleadoModelo.fireTableDataChanged();

            limpiarTodosLosCampos();
            habilitarTodosLosCampos(false);
            habilitarTodosLosBotones(false);

            this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

            this.jtb_empleado.setEnabled(true);

            this.empleadoSeleccionado = null;

            this.jtb_empleado.getSelectionModel().setSelectionInterval(this.tablaEmpleadoModelo.getRowCount() - 1, this.tablaEmpleadoModelo.getRowCount() - 1);
            this.tablaEmpleadoModelo.getValueAt(this.tablaEmpleadoModelo.getRowCount() - 1, 0);

            seleccionarEmpleado();

            int selectedRow = jtb_empleado.getSelectedRow();
            Rectangle rect = jtb_empleado.getCellRect(selectedRow, 0, true);
            jScrollPaneTabla.getViewport().scrollRectToVisible(rect);
            crud = "";
        } catch (NonexistentEntityException ex) {
            //agregar mensaje que la persona esta asociada
            JOptionPane.showConfirmDialog(null, "Posee registros asociados", "Error Eliminación", JOptionPane.CLOSED_OPTION, JOptionPane.QUESTION_MESSAGE);

        }

    }
}
